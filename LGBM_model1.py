import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import feather
import gc
from datetime import datetime
from tqdm import tqdm, tqdm_notebook
from sklearn.model_selection import train_test_split, KFold, StratifiedKFold
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.impute import SimpleImputer
import lightgbm as lgb
from sklearn.metrics import roc_auc_score
from numba import jit
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))


@jit(parallel=True)
def mean_score(array):
    return np.mean(array)

@jit(parallel=True)
def jit_div(array, divisor):
    return np.divide(array, divisor)
    
# optimized datatypes for loading a dataframe from train/test.csv
dtypes = {
        'MachineIdentifier':                                    'object',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
}







train = pd.read_csv('../input/microsoft-malware-prediction/train.csv', dtype=dtypes, low_memory=True)
test  = pd.read_csv('../input/microsoft-malware-prediction/test.csv',  dtype=dtypes, low_memory=True)

target = train['HasDetections']
machine_id = test['MachineIdentifier']
train.drop(['MachineIdentifier', 'HasDetections'], inplace=True, axis=1)
test.drop(['MachineIdentifier'], inplace=True, axis=1)







import numpy as np
Av_datedict = np.load('../input/malware-timestamps/AvSigVersionTimestamps.npy', allow_pickle=True)
Av_datedict = Av_datedict[()]

train['Date'] = train['AvSigVersion'].map(Av_datedict)
test['Date'] = test['AvSigVersion'].map(Av_datedict)







day_1 = datetime(2018,1,1) 
week_dict = {}
for i in Av_datedict: 
    week_dict[i] = (Av_datedict[i]-day_1).days//7
train['WeekNo'] = train['AvSigVersion'].map(week_dict)
test['WeekNo'] = test['AvSigVersion'].map(week_dict)
train['WeekNo'].head()






train['SmartScreen'] = train['SmartScreen'].str.lower()
train['SmartScreen'].replace(
    {'promt': 'prompt', 
    'promprt': 'prompt',
    'enabled': 'on',
    'of': 'off',
    'deny': '0',
    '00000000': '0',
    'requiredadmin': 'requireadmin'},
     inplace=True)

train['SmartScreen'].replace({'0': np.nan}, inplace=True)
train['SmartScreen'] = train['SmartScreen'].astype('category')

test['SmartScreen'] = test['SmartScreen'].str.lower()
test['SmartScreen'].replace(
    {'promt': 'prompt', 
    'promprt': 'prompt',
    'enabled': 'on',
    'of': 'off',
    'deny': '0',
    '00000000': '0',
    'requiredadmin': 'requireadmin'},
     inplace=True)

test['SmartScreen'].replace({'0': np.nan}, inplace=True)
test['SmartScreen'] = test['SmartScreen'].astype('category')

def group_batt(x):
    x = x.lower()
    if 'li' in x:
        return 1
    return 0
    
train['li'] = train['Census_InternalBatteryType'].apply(group_batt).replace({np.float64('nan'):0}).astype('int8')
test['li'] = test['Census_InternalBatteryType'].apply(group_batt).replace({np.float64('nan'):0}).astype('int8')







def isnan(feature):
    return 1 if np.isnan(float(feature)) else 0

# count -1 as a missing value for train
train['Census_InternalPrimaryDisplayResolutionHorizontal'].replace({-1: np.nan}, inplace=True)
train['Census_InternalPrimaryDisplayResolutionVertical'].replace({-1: np.nan}, inplace=True)

# count -1 as a missing value for test
test['Census_InternalPrimaryDisplayResolutionHorizontal'].replace({-1: np.nan}, inplace=True)
test['Census_InternalPrimaryDisplayResolutionVertical'].replace({-1: np.nan}, inplace=True)





# Create a binary feature indicating that a missing value has been imputed for train/test
train['core_nan'] = train['Census_ProcessorCoreCount'].apply(isnan).astype('uint8')
train['ram_nan'] = train['Census_TotalPhysicalRAM'].apply(isnan).astype('uint8')
train['primary_nan'] = train['Census_PrimaryDiskTotalCapacity'].apply(isnan).astype('uint8')
train['system_nan'] = train['Census_SystemVolumeTotalCapacity'].apply(isnan).astype('uint8')
train['diagonal_nan'] = train['Census_InternalPrimaryDiagonalDisplaySizeInInches'].apply(isnan).astype('uint8')
train['horizonal_nan'] = train['Census_InternalPrimaryDisplayResolutionHorizontal'].apply(isnan).astype('uint8')
train['vertical_nan'] = train['Census_InternalPrimaryDisplayResolutionVertical'].apply(isnan).astype('uint8')
train['charges_nan'] = train['Census_InternalBatteryNumberOfCharges'].apply(isnan).astype('uint8')

test['core_nan'] = test['Census_ProcessorCoreCount'].apply(isnan).astype('uint8')
test['ram_nan'] = test['Census_TotalPhysicalRAM'].apply(isnan).astype('uint8')
test['primary_nan'] = test['Census_PrimaryDiskTotalCapacity'].apply(isnan).astype('uint8')
test['system_nan'] = test['Census_SystemVolumeTotalCapacity'].apply(isnan).astype('uint8')
test['diagonal_nan'] = test['Census_InternalPrimaryDiagonalDisplaySizeInInches'].apply(isnan).astype('uint8')
test['horizonal_nan'] = test['Census_InternalPrimaryDisplayResolutionHorizontal'].apply(isnan).astype('uint8')
test['vertical_nan'] = test['Census_InternalPrimaryDisplayResolutionVertical'].apply(isnan).astype('uint8')
test['charges_nan'] = test['Census_InternalBatteryNumberOfCharges'].apply(isnan).astype('uint8')




# impute some median values first
imputer = SimpleImputer(strategy='median')

train['Census_InternalBatteryNumberOfCharges'] = imputer.fit_transform(train['Census_InternalBatteryNumberOfCharges'].values.reshape(-1,1))
test['Census_InternalBatteryNumberOfCharges'] = imputer.transform(test['Census_InternalBatteryNumberOfCharges'].values.reshape(-1,1))

train['Census_InternalPrimaryDiagonalDisplaySizeInInches'] = imputer.fit_transform(train['Census_InternalPrimaryDiagonalDisplaySizeInInches'].values.reshape(-1,1))
test['Census_InternalPrimaryDiagonalDisplaySizeInInches'] = imputer.transform(test['Census_InternalPrimaryDiagonalDisplaySizeInInches'].values.reshape(-1,1))

train['Census_ProcessorCoreCount'] = imputer.fit_transform(train['Census_ProcessorCoreCount'].values.reshape(-1,1))
test['Census_ProcessorCoreCount'] = imputer.transform(test['Census_ProcessorCoreCount'].values.reshape(-1,1))

train['Census_TotalPhysicalRAM'] = imputer.fit_transform(train['Census_TotalPhysicalRAM'].values.reshape(-1,1))
test['Census_TotalPhysicalRAM'] = imputer.transform(test['Census_TotalPhysicalRAM'].values.reshape(-1,1))

train['Census_PrimaryDiskTotalCapacity'] = imputer.fit_transform(train['Census_PrimaryDiskTotalCapacity'].values.reshape(-1,1))
test['Census_PrimaryDiskTotalCapacity'] = imputer.transform(test['Census_PrimaryDiskTotalCapacity'].values.reshape(-1,1))

train['Census_SystemVolumeTotalCapacity'] = imputer.fit_transform(train['Census_SystemVolumeTotalCapacity'].values.reshape(-1,1))
test['Census_SystemVolumeTotalCapacity'] = imputer.transform(test['Census_SystemVolumeTotalCapacity'].values.reshape(-1,1))

train['Census_InternalPrimaryDisplayResolutionHorizontal'] = imputer.fit_transform(train['Census_InternalPrimaryDisplayResolutionHorizontal'].values.reshape(-1,1))
test['Census_InternalPrimaryDisplayResolutionHorizontal'] = imputer.transform(test['Census_InternalPrimaryDisplayResolutionHorizontal'].values.reshape(-1,1))

train['Census_InternalPrimaryDisplayResolutionVertical'] = imputer.fit_transform(train['Census_InternalPrimaryDisplayResolutionVertical'].values.reshape(-1,1))
test['Census_InternalPrimaryDisplayResolutionVertical'] = imputer.transform(test['Census_InternalPrimaryDisplayResolutionVertical'].values.reshape(-1,1))

train['AVProductsEnabled'] = imputer.fit_transform(train['AVProductsEnabled'].values.reshape(-1,1))
test['AVProductsEnabled'] = imputer.transform(test['AVProductsEnabled'].values.reshape(-1,1))

train['AVProductsInstalled'] = imputer.fit_transform(train['AVProductsInstalled'].values.reshape(-1,1))
test['AVProductsInstalled'] = imputer.transform(test['AVProductsInstalled'].values.reshape(-1,1))



numerical_categorical = 
[
    'RtpStateBitfield',
    'DefaultBrowsersIdentifier', 
    'AVProductStatesIdentifier', 
    'CityIdentifier' , 
    'OrganizationIdentifier',
    'GeoNameIdentifier', 
    'IeVerIdentifier', 
    'UacLuaenable', 
    'Census_OEMNameIdentifier', 
    'Census_OEMModelIdentifier', 
    'Census_ProcessorManufacturerIdentifier', 
    'Census_ProcessorModelIdentifier', 
    'Census_OSInstallLanguageIdentifier', 
    'Census_FirmwareManufacturerIdentifier', 
    'Census_FirmwareVersionIdentifier', 
    'Wdft_RegionIdentifier', 
    'LocaleEnglishNameIdentifier', 
    'OsBuild', 
    'OsSuite', 
    'Census_OSBuildNumber', 
    'CountryIdentifier', 
    'Census_OSUILocaleIdentifier', 
    'Census_OSBuildRevision',
    'WeekNo'
]
categorical = [
    'ProductName', 
    'Platform',
    'Processor',
    'OsVer',
    'OsPlatformSubRelease', 
    'OsBuildLab', 
    'SkuEdition',
    'PuaMode',
    'SmartScreen',
    'Census_MDC2FormFactor', 
    'Census_DeviceFamily',
    'Census_ProcessorClass',
    'Census_PrimaryDiskTypeName', 
    'Census_ChassisTypeName',
    'Census_PowerPlatformRoleName',
    'Census_InternalBatteryType', 
    'Census_OSArchitecture',
    'Census_OSBranch',
    'Census_OSEdition',
    'Census_OSSkuName', 
    'Census_OSInstallTypeName',
    'Census_OSWUAutoUpdateOptionsName',
    'Census_GenuineStateName', 
    'Census_ActivationChannel',
    'Census_FlightRing', 
    'AvSigVersion',
    'AppVersion',
    'EngineVersion',
    'Census_OSVersion' 
]



# values that occur in train but not test will not be useful for predicting test
for col in numerical_categorical:
    train.loc[~train[col].isin(test[col].unique()), col] = -1

for col in categorical:
    train[col] = train[col].cat.add_categories([-1])
    train.loc[~train[col].isin(test[col].unique()), col] = -1





def frequency_encoding(variable):
    t = pd.concat([train[variable], test[variable]]).value_counts().reset_index()
    t = t.reset_index()
    t.loc[t[variable] == 1, 'level_0'] = np.nan
    t.set_index('index', inplace=True)
    max_label = t['level_0'].max() + 1
    t.fillna(max_label, inplace=True)
    return t.to_dict()['level_0']

for col in tqdm(numerical_categorical):
    freq_enc_dict = frequency_encoding(col)
    train[col] = train[col].map(lambda x: freq_enc_dict.get(x, np.nan)).astype('float32')
    test[col] = test[col].map(lambda x: freq_enc_dict.get(x, np.nan)).astype('float32')
    
for col in tqdm(categorical):
    freq_enc_dict = frequency_encoding(col)
    train[col] = train[col].map(lambda x: freq_enc_dict.get(x, np.nan)).astype('float32')
    test[col] = test[col].map(lambda x: freq_enc_dict.get(x, np.nan)).astype('float32')








def run_lgb(train, target, test):
    global lgbm_classifier
    
    kf = KFold(n_splits=3, shuffle=True)

    train_scores = []
    cross_validation_scores = []
    train_predictions = np.zeros(train.shape[0], dtype='float32')
    test_predictions = np.zeros(test.shape[0], dtype='float32')
    
    for (train_index, test_index) in tqdm(kf.split(train, target)):
        x_train, y_train = train.iloc[train_index], target.iloc[train_index]
        x_test, y_test = train.iloc[test_index], target.iloc[test_index]

        lgbm_classifier = lgb.LGBMClassifier(boosting_type='gbdt', 
                                 num_leaves=250, 
                                 n_estimators=2000, 
                                 learning_rate=0.02)

        lgbm_classifier.fit(x_train, y_train, eval_metric='auc',  
                eval_set=[(x_test, y_test)], 
                verbose=200,
                early_stopping_rounds=100)
        pred = lgbm_classifier.predict(x_train)
        score = roc_auc_score(y_train, pred)
        train_scores.append(score)

        pred = lgbm_classifier.predict(x_test)
        score = roc_auc_score(y_test, pred)
        cross_validation_scores.append(score)
        
        # predict probabilities for train
        pred_prob = lgbm_classifier.predict_proba(train)[:,1]
        train_predictions = np.add(train_predictions, pred_prob).astype('float32')
        
        # predict probabilities for test
        pred_prob = lgbm_classifier.predict_proba(test)[:,1]
        test_predictions = np.add(test_predictions, pred_prob).astype('float32')
    
    print(f'training sklearn auc: {mean_score(train_scores):.4f}')
    print(f'3-fold cross_validation_scores sklearn auc: {mean_score(cross_validation_scores):.4f}')

    return jit_div(train_predictions, 3), jit_div(test_predictions, 3)

train_predictions, test_predictions = run_lgb(train, target, test)






#Adverserial validation
train['label'] = 1
test['label'] = 0
train['label'] = train['label'].astype('uint8')
test['label'] = test['label'].astype('uint8')

# combine train and test 
total = pd.concat([train, test], axis=0)
psuedo_label = total['label']
total.drop(['label'], inplace=True, axis=1)
total.reset_index(drop=True, inplace=True)

for col in categorical:
    total[col] = total[col].astype('category')

def adversarialValidation(train, target):
    kf = KFold(n_splits=5, shuffle=True)

    train_scores = []
    cross_validation_scores = []
    
    for (train_index, test_index) in tqdm(kf.split(train, target)):
        x_train, y_train = train.iloc[train_index], target.iloc[train_index]
        x_test, y_test = train.iloc[test_index], target.iloc[test_index]

        lgbm_classifier = lgb.LGBMClassifier()

        lgbm_classifier.fit(x_train, y_train)
        pred = lgbm_classifier.predict(x_train)
        score = roc_auc_score(y_train, pred)
        train_scores.append(score)

        pred = lgbm_classifier.predict(x_test)
        score = roc_auc_score(y_test, pred)
        cross_validation_scores.append(score)
    
    print(f'training sklearn auc: {mean_score(train_scores):.4f}')
    print(f'3-fold CV sklearn auc: {mean_score(cross_validation_scores):.4f}')

# Plots in the eda file
# With all columns
adversarialValidation(total, psuedo_label)

# Dropping AvSigVersion
total.drop(['AvSigVersion'], axis=1, inplace=True)
adversarialValidation(total, psuedo_label)

# Dropping Census_OSVersion
total.drop(['Census_OSVersion'], axis=1, inplace=True)
adversarialValidation(total, psuedo_label)

# Dropping EngineVersion
total.drop(['EngineVersion'], axis=1, inplace=True)
adversarialValidation(total, psuedo_label)



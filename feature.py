import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float32',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int16',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float32',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float32',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float64',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float64',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32', 
        'Census_InternalPrimaryDisplayResolutionVertical':      'float32', 
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float64', 
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }

train=pd.read_csv("./data/train.csv",dtype=dtypes) #specify path

print("Droping Unwanted Features")
print("Droping :\n")

print('MachineIdentifier', 'LocaleEnglishNameIdentifier','Census_InternalBatteryType','Census_InternalBatteryNumberOfCharges','Census_OSInstallLanguageIdentifier','Census_InternalPrimaryDiagonalDisplaySizeInInches','Census_InternalPrimaryDisplayResolutionHorizontal','Census_InternalPrimaryDisplayResolutionVertical','Census_OSUILocaleIdentifier','Census_IsTouchEnabled','Census_IsPenCapable','Census_IsAlwaysOnAlwaysConnectedCapable','Wdft_RegionIdentifier',sep="\n")

train.drop(['MachineIdentifier', 'LocaleEnglishNameIdentifier','Census_InternalBatteryType','Census_InternalBatteryNumberOfCharges','Census_OSInstallLanguageIdentifier','Census_InternalPrimaryDiagonalDisplaySizeInInches','Census_InternalPrimaryDisplayResolutionHorizontal','Census_InternalPrimaryDisplayResolutionVertical','Census_OSUILocaleIdentifier','Census_IsTouchEnabled','Census_IsPenCapable','Census_IsAlwaysOnAlwaysConnectedCapable','Wdft_RegionIdentifier'], axis = 1,inplace=True)  #d

print("\n\nColumn\t\t\t% Empty\n")
print(((train.isnull().sum()/train.shape[0])*100).sort_values(ascending=False))

print("\n\nDroping Features With More Than 80% Empty Values")
print("Droping :\n")

print('PuaMode', 'Census_ProcessorClass','DefaultBrowsersIdentifier','Census_IsFlightingInternal',sep="\n")

train.drop(['PuaMode', 'Census_ProcessorClass','DefaultBrowsersIdentifier','Census_IsFlightingInternal'], axis = 1,inplace=True) # droping features with more than 80% empty values

unbalanced_cols = pd.DataFrame([{'column': c, 'unique_vals': train[c].nunique(), 'unbalancedness': train[c].value_counts(normalize=True).values[0] * 100} for c in train.columns])
unbalanced_cols = unbalanced_cols.sort_values('unbalancedness', ascending=False)

print(unbalanced_cols)

print("\n\nDroping Features Unbalancedness >= 99%")
print("Droping :\n")

print('Census_IsWIMBootEnabled', 'IsBeta','Census_IsFlightsDisabled','AutoSampleOptIn','Census_ThresholdOptIn','SMode','Census_IsPortableOperatingSystem','Census_DeviceFamily','UacLuaenable','Census_IsVirtualDevice',sep="\n")

train.drop(['Census_IsWIMBootEnabled', 'IsBeta','Census_IsFlightsDisabled','AutoSampleOptIn','Census_ThresholdOptIn','SMode','Census_IsPortableOperatingSystem','Census_DeviceFamily','UacLuaenable','Census_IsVirtualDevice'], axis = 1,inplace=True) # droping features unbalancedness >= 99

train=train.dropna()

trans_dict = {
    'off': 'Off', '&#x02;': '2', '&#x01;': '1', 'on': 'On', 'requireadmin': 'RequireAdmin', 'OFF': 'Off', 
    'Promt': 'Prompt', 'requireAdmin': 'RequireAdmin', 'prompt': 'Prompt', 'warn': 'Warn', 
    '00000000': '0', '&#x03;': '3', np.nan: 'RequireAdmin'
}
print("\n\nReplacing empty values with Default values for SmartScreen")

train.replace({'SmartScreen': trans_dict}, inplace=True)

print("\n\nReplacing empty values with Default values for OrganizationIdentifier")

train.replace({'OrganizationIdentifier': {np.nan: 0}}, inplace=True)

train['SmartScreen'] = train.SmartScreen.astype('category')

category_cols = train.select_dtypes(include='category').columns.tolist()

le = LabelEncoder()

for col in category_cols:
    train[col] = le.fit_transform(train[col])

cols = train.columns.tolist()

plt.figure(figsize=(10,10))
co_cols = cols[:10]
co_cols.append('HasDetections')
sns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)
plt.title('Correlation between 1st and 10th columns')
plt.show()

co_cols = cols[10:20]
co_cols.append('HasDetections')
plt.figure(figsize=(10,10))
sns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)
plt.title('Correlation between 11th and 20th columns')
plt.show()

co_cols = cols[20:30]
co_cols.append('HasDetections')
plt.figure(figsize=(10,10))
sns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)
plt.title('Correlation between 21th and 30th columns')
plt.show()

co_cols = cols[30:40]
co_cols.append('HasDetections')
plt.figure(figsize=(10,10))
sns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)
plt.title('Correlation between 31th and 40th columns')
plt.show()

co_cols = cols[40:50]
co_cols.append('HasDetections')
plt.figure(figsize=(10,10))
sns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)
plt.title('Correlation between 41th and 50th columns')
plt.show()

co_cols = cols[50:]
plt.figure(figsize=(10,10))
sns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0)
plt.title('Correlation between 51th and 60th columns')
plt.show()


train.drop(['EngineVersion', 'RtpStateBitfield','IeVerIdentifier','Platform','SkuEdition','Census_OSSkuName','Census_OSBuildNumber','Processor'], axis = 1,inplace=True) # droping features with more correlation coefficient > 0.90

print("\n\nDroping Features With More Correlation Coefficient > 0.90")
print("Droping :\n")

print('EngineVersion', 'RtpStateBitfield','IeVerIdentifier','Platform','SkuEdition','Census_OSSkuName','Census_OSBuildNumber','Processor',sep="\n")


"""print("Writing new Data Frame to CSV")

train.to_csv("./data/new_train.csv", sep=',', encoding='utf-8') #write modified train dataframe to csv"""








